create or replace NONEDITIONABLE PROCEDURE "P_EVALUATESTRUCTURE" 
			
	
AS 
      VARROWCOUNT				INT;
      IncorrectCount    INT;
      VARDATE           DATE;
      VARSTRING         STRING(20);
      VARNUMBER         NUMBER(5,2);

BEGIN
  INCORRECTCOUNT := 0;
  --first commit all uncommitted work so it is not unintentionally rolled back
  COMMIT;

DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING EXISTENCE OF TABLES AND RECORDS----------');

  -- CHECK TABLE P_DOG
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
	;
	-- IF varRowCount =16 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_DOG exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_DOG has '||VARROWCOUNT||' records (should have 16).');
		END;
  IF (VARROWCOUNT <> 16) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;

	 -- CHECK TABLE P_DOG_BREED_PERCENTAGE
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
	;
	-- IF varRowCount = 31 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_DOG_BREED_PERCENTAGE exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_DOG_BREED_PERCENTAGE has '||VARROWCOUNT||' records (should have 31).');
		END;
  IF (VARROWCOUNT <> 31) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;

 -- CHECK TABLE P_DOGBREED
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOGBREED
	;
	-- IF varRowCount = 216 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_DOGBREED exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_DOGBREED has '||VARROWCOUNT||' records (should have 216).');
		END;
  IF (VARROWCOUNT <> 216) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;
 -- CHECK TABLE P_INCIDENT
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
	;
	-- IF varRowCount =12 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_INCIDENT exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_INCIDENT has '||VARROWCOUNT||' records (should have 12).');
		END;
  IF (VARROWCOUNT <> 12) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;

 -- CHECK TABLE P_OWNER
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
	;
	-- IF varRowCount = 17 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_OWNER exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_OWNER has '||VARROWCOUNT||' records (should have 17).');
		END;
	IF (VARROWCOUNT <> 17) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;

 -- CHECK TABLE P_OWNER_DOG_INT
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER_DOG_INT
	;
	-- IF varRowCount = 28 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_OWNER_DOG_INT exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_OWNER_DOG_INT has '||VARROWCOUNT||' records (should have 28).');
		END;
	IF (VARROWCOUNT <> 28) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;
 -- CHECK TABLE P_PET
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
	;
	-- IF varRowCount = 14 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_PET exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_PET has '||VARROWCOUNT||' records (should have 14).');
		END;
	IF (VARROWCOUNT <> 14) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;
 -- CHECK TABLE P_PHOTO
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
	;
	-- IF varRowCount = 18 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_PHOTO exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_PHOTO has '||VARROWCOUNT||' records (should have 18).');
		END;
	IF (VARROWCOUNT <> 18) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;
 -- CHECK TABLE P_SERVICE_CERTIFICATIONS
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_CERTIFICATIONS
	;
	-- IF varRowCount = 3 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_SERVICE_CERTIFICATIONS exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_SERVICE_CERTIFICATIONS has '||VARROWCOUNT||' records (should have 3).');
		END;
	IF (VARROWCOUNT <> 3) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;
 -- CHECK TABLE P_SERVICE_DOGS
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_DOGS
	;
	-- IF varRowCount = 2 THEN CORRECT.
		BEGIN
			DBMS_OUTPUT.PUT_LINE('Table P_SERVICE_DOGS exists.');
			DBMS_OUTPUT.PUT_LINE('Table P_SERVICE_DOGS has '||VARROWCOUNT||' records (should have 2).');
		END;
	IF (VARROWCOUNT <> 2) THEN 
    INCORRECTCOUNT := INCORRECTCOUNT + 1;
    DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
  END IF;


DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING ATTRIBUTE AND PRIMARY KEY STRUCTURE----------');

BEGIN  
Insert into P_DOG (DOG_ID,DOG_NAME,DOG_BIRTH_MONTH,DOG_BIRTH_YEAR,SEX,SPAYED_OR_NEUTERED) values ('10101','Loki',3,2013,'M','Y');
DBMS_OUTPUT.PUT_LINE('P_DOG ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOG REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN 
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
  WHERE DOG_ID = '10001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOG (DOG_ID,DOG_NAME,DOG_BIRTH_MONTH,DOG_BIRTH_YEAR,SEX,SPAYED_OR_NEUTERED) values ('10001','Loki',3,2013,'M','Y');
DBMS_OUTPUT.PUT_LINE('P_DOG DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOG HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_DOG_BREED_PERCENTAGE (DOG_ID,BREED_ID,PERCENT) values ('10001','20125',50);
DBMS_OUTPUT.PUT_LINE('P_DOG_BREED_PERCENTAGE ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOG_BREED_PERCENTAGE REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10001' AND BREED_ID = '20128' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOG_BREED_PERCENTAGE (DOG_ID,BREED_ID,PERCENT) values ('10001','20128',50);
DBMS_OUTPUT.PUT_LINE('P_DOG_BREED_PERCENTAGE DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOG_BREED_PERCENTAGE HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_DOGBREED (BREED_ID,BREED_COMMON_NAME) values ('21001','AFGHAN1 HOUND');
DBMS_OUTPUT.PUT_LINE('P_DOGBREED ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOGBREED REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOGBREED
  WHERE BREED_ID = '20001' 
 	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOGBREED (BREED_ID,BREED_COMMON_NAME) values ('20001','AFGHAN1 HOUND');
DBMS_OUTPUT.PUT_LINE('P_DOGBREED DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_DOGBREED HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,INCIDENT_TYPE,DATE_OF_INCIDENT,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10015',1,'BITES HUMAN',to_date('12-MAR-10','DD-MON-RR'),'Y','Bit mailcarrier - required surgical repair');
DBMS_OUTPUT.PUT_LINE('P_INCIDENT ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_INCIDENT REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10016'
  AND INCIDENT_NUM=1
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,INCIDENT_TYPE,DATE_OF_INCIDENT,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10016',1,'BITES HUMAN',to_date('12-MAR-10','DD-MON-RR'),'Y','Bit mailcarrier - required surgical repair');
DBMS_OUTPUT.PUT_LINE('P_INCIDENT DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_INCIDENT HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,CITY,STATE,ZIP,TIMESTAMP,PHONE,EMAIL) values ('30101','Alan','BLarry','10 Elm Drive',null,'LARKSVILLE','PA','18704',to_timestamp('05-JUL-14 11.29.10.000000000 AM','DD-MON-RR HH.MI.SS.FF AM'),'5705559631','abarry@someplace.com');
DBMS_OUTPUT.PUT_LINE('P_OWNER ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_OWNER REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '30001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,CITY,STATE,ZIP,TIMESTAMP,PHONE,EMAIL) values ('30001','Alan','BLarry','10 Elm Drive',null,'LARKSVILLE','PA','18704',to_timestamp('05-JUL-14 11.29.10.000000000 AM','DD-MON-RR HH.MI.SS.FF AM'),'5705559631','abarry@someplace.com');
DBMS_OUTPUT.PUT_LINE('P_OWNER DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_OWNER HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_OWNER_DOG_INT (OWNER_ID,DOG_ID) values ('30011','10001');
DBMS_OUTPUT.PUT_LINE('P_OWNER_DOG_INT ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_OWNER_DOG_INT REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER_DOG_INT
  WHERE OWNER_ID = '30001'
  AND DOG_ID = '10001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER_DOG_INT (OWNER_ID,DOG_ID) values ('30001','10001');
DBMS_OUTPUT.PUT_LINE('P_OWNER_DOG_INT DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_OWNER_DOG_INT HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,DATE_OF_LAST_PAYMENT,TOTAL_FEES_CURRENT_YEAR,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10007','LPG13501  ',to_date('05-JAN-14','DD-MON-RR'),30,15,15);
DBMS_OUTPUT.PUT_LINE('P_PET ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_PET REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,DATE_OF_LAST_PAYMENT,TOTAL_FEES_CURRENT_YEAR,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10001','LPG13501  ',to_date('05-JAN-14','DD-MON-RR'),30,15,15);
DBMS_OUTPUT.PUT_LINE('P_PET DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_PET HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_PHOTO (PHOTO_ID,PHOTO_FILENAME,PHOTO_TIMESTAMP,DOG_ID) values ('51001','2014rft.jpg',to_timestamp('01-JUL-14 12.41.28.000000000 PM','DD-MON-RR HH.MI.SS.FF AM'),'10001');
DBMS_OUTPUT.PUT_LINE('P_PHOTO ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_PHOTO REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
  WHERE PHOTO_ID = '50001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PHOTO (PHOTO_ID,PHOTO_FILENAME,PHOTO_TIMESTAMP,DOG_ID) values ('50001','2014rft.jpg',to_timestamp('01-JUL-14 12.41.28.000000000 PM','DD-MON-RR HH.MI.SS.FF AM'),'10001');
DBMS_OUTPUT.PUT_LINE('P_PHOTO DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_PHOTO HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_SERVICE_CERTIFICATIONS (CERT_ID,CERTIFICATION,ORIGINATION_DATE,MOST_RECENT_RENEWAL_DATE,CERT_EXPIRATION_DATE,DOG_ID) values ('61001','Seeing1 Eye',to_date('06-JUN-02','DD-MON-RR'),to_date('06-JUN-12','DD-MON-RR'),to_date('05-JUN-15','DD-MON-RR'),'10003');
DBMS_OUTPUT.PUT_LINE('P_SERVICE_CERTIFICATIONS ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_SERVICE_CERTIFICATIONS REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_CERTIFICATIONS
  WHERE CERT_ID = '60001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_SERVICE_CERTIFICATIONS (CERT_ID,CERTIFICATION,ORIGINATION_DATE,MOST_RECENT_RENEWAL_DATE,CERT_EXPIRATION_DATE,DOG_ID) values ('60001','Seeing11 Eye',to_date('06-JUN-02','DD-MON-RR'),to_date('06-JUN-12','DD-MON-RR'),to_date('05-JUN-15','DD-MON-RR'),'10003');
DBMS_OUTPUT.PUT_LINE('P_SERVICE_CERTIFICATIONS DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_SERVICE_CERTIFICATIONS HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;

BEGIN  
Insert into P_SERVICE_DOGS (DOG_ID,SERVICE_DOG_LICENSE_NUM,OWNER_ID_ASSIGNED) values ('10001','US3451EEEE','30006');
DBMS_OUTPUT.PUT_LINE('P_SERVICE_DOGS ACCEPTS APPROPRIATE INSERTS');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_SERVICE_DOGS REJECTS APPROPRIATE INSERTS');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
END;
BEGIN  
SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_DOGS
  WHERE DOG_ID = '10003'
  ;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Primary Key Test Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_SERVICE_DOGS (DOG_ID,SERVICE_DOG_LICENSE_NUM,OWNER_ID_ASSIGNED) values ('10003','US3451EE098','30006');
DBMS_OUTPUT.PUT_LINE('P_SERVICE_DOGS DOES NOT SEEM TO HAVE A PRIMARY KEY SPECIFIED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('P_SERVICE_DOGS HAS A PRIMARY KEY SPECIFIED');
END;
END IF;
END;


--Check Foreign keys


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING FOREIGN KEYS----------');
DBMS_OUTPUT.PUT_LINE('CHECKING P_DOG_BREED_PERCENTAGE.BREED_ID references P_DOGBREED.BREED_ID...');
BEGIN
Insert into P_DOG_BREED_PERCENTAGE (DOG_ID,BREED_ID,PERCENT) values ('10001','20150',50);
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10001' AND BREED_ID = '20150'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOG_BREED_PERCENTAGE SET BREED_ID = '32457' WHERE DOG_ID = '10001' AND BREED_ID = '20150';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
end if;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_DOG_BREED_PERCENTAGE.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_DOG_BREED_PERCENTAGE (DOG_ID,BREED_ID,PERCENT) values ('10002','20150',50);
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10002' AND BREED_ID = '20150'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOG_BREED_PERCENTAGE SET DOG_ID = '32457' WHERE DOG_ID = '10002' AND BREED_ID = '20150';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
end if;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_OWNER_DOG_INT.OWNER_ID references P_OWNER.OWNER_ID...');
BEGIN
Insert into P_OWNER_DOG_INT (OWNER_ID,DOG_ID) values ('30009','10001');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER_DOG_INT
  WHERE OWNER_ID = '30009' AND DOG_ID = '10001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_OWNER_DOG_INT SET OWNER_ID = '32457' WHERE OWNER_ID = '30009' AND DOG_ID = '10001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
end if;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_OWNER_DOG_INT.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_OWNER_DOG_INT (OWNER_ID,DOG_ID) values ('30008','10001');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER_DOG_INT
  WHERE OWNER_ID = '30008' AND DOG_ID = '10001'
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_OWNER_DOG_INT SET DOG_ID = '32457' WHERE OWNER_ID = '30008' AND DOG_ID = '10001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
end if;
END;



BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_INCIDENT.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,INCIDENT_TYPE,DATE_OF_INCIDENT,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10001',4,'BITES HUMAN',to_date('12-MAR-10','DD-MON-RR'),'Y','Bit');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10001' AND INCIDENT_NUM = 4 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_INCIDENT SET DOG_ID = '33333' WHERE DOG_ID = '10001' AND INCIDENT_NUM = 4;
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_PHOTO.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_PHOTO (PHOTO_ID,PHOTO_FILENAME,PHOTO_TIMESTAMP,DOG_ID) values ('51001','2014r1ft.jpg',to_timestamp('01-JUL-14 12.41.28.000000000 PM','DD-MON-RR HH.MI.SS.FF AM'),'10001');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
  WHERE PHOTO_ID = '51001' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_PHOTO SET DOG_ID = '33333' WHERE PHOTO_ID = '51001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_SERVICE_DOGS.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_SERVICE_DOGS (DOG_ID,SERVICE_DOG_LICENSE_NUM,OWNER_ID_ASSIGNED) values ('10001','US345EE3098','30001');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_DOGS
  WHERE DOG_ID = '10001' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_SERVICE_DOGS SET DOG_ID = '33333' WHERE DOG_ID = '10001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_SERVICE_DOGS.OWNER_ID_ASSIGNED references P_OWNER.OWNER_ID...');
BEGIN
Insert into P_SERVICE_DOGS (DOG_ID,SERVICE_DOG_LICENSE_NUM,OWNER_ID_ASSIGNED) values ('10001','US345ED3098','30001');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_DOGS
  WHERE DOG_ID = '10001' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_SERVICE_DOGS SET OWNER_ID_ASSIGNED = '33333' WHERE DOG_ID = '10001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_SERVICE_CERTIFICATIONS.DOG_ID references P_SERVICE_DOGS.DOG_ID...');
BEGIN
Insert into P_SERVICE_CERTIFICATIONS (CERT_ID,CERTIFICATION,ORIGINATION_DATE,MOST_RECENT_RENEWAL_DATE,CERT_EXPIRATION_DATE,DOG_ID) values ('61001','Seeing1 Eye',to_date('06-JUN-02','DD-MON-RR'),to_date('06-JUN-12','DD-MON-RR'),to_date('05-JUN-15','DD-MON-RR'),'10003');
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_CERTIFICATIONS
  WHERE CERT_ID = '61001' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_SERVICE_CERTIFICATIONS SET DOG_ID = '10001' WHERE CERT_ID = '61001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING P_PET.DOG_ID references P_DOG.DOG_ID...');
BEGIN
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,DATE_OF_LAST_PAYMENT,TOTAL_FEES_CURRENT_YEAR,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10003','LPDEE501  ',to_date('05-JAN-14','DD-MON-RR'),30,15,15);
EXCEPTION
WHEN OTHERS THEN
 ROLLBACK;
--DO NOTHING 
END;  
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10003' 
	;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_PET SET DOG_ID = '33333' WHERE DOG_ID = '10003';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING CHECK CONSTRAINTS----------');
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_DOG.DOG_BIRTH_MONTH...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
  WHERE DOG_ID = '10001' 
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOG SET DOG_BIRTH_MONTH = 0 WHERE DOG_ID = '10001' 
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED LOWER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED LOWER BOUND');
END;
BEGIN
UPDATE P_DOG SET DOG_BIRTH_MONTH = 13 WHERE DOG_ID = '10001' 
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED UPPER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED UPPER BOUND');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_DOG.DOG_BIRTH_YEAR...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
  WHERE DOG_ID = '10001' 
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOG SET DOG_BIRTH_YEAR = 1979 WHERE DOG_ID = '10001' 
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED LOWER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED LOWER BOUND');
END;
BEGIN
UPDATE P_DOG SET DOG_BIRTH_YEAR = 2031 WHERE DOG_ID = '10001' 
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED UPPER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED UPPER BOUND');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_DOG_BREED_PERCENTAGE.PERCENT...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10001' AND BREED_ID = '20100'
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOG_BREED_PERCENTAGE SET PERCENT = -1 WHERE DOG_ID = '10001' AND BREED_ID = '20100' 
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED LOWER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED LOWER BOUND');
END;
BEGIN
UPDATE P_DOG_BREED_PERCENTAGE SET PERCENT = 101 WHERE DOG_ID = '10001' AND BREED_ID = '20100'
;
DBMS_OUTPUT.PUT_LINE('    ....FAILED UPPER BOUND');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED UPPER BOUND');
end;
END IF;
END;



BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_INCIDENT.HAS_MAJOR_HUMAN_INJURY...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10001' AND INCIDENT_NUM = 1
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_INCIDENT SET HAS_MAJOR_HUMAN_INJURY = 'Z' WHERE DOG_ID = '10001' AND INCIDENT_NUM = 1;
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_OWNER.ZIP...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '30001'
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_OWNER SET ZIP = '11111' WHERE OWNER_ID = '30001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_OWNER.EMAIL...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '30001'
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_OWNER SET EMAIL = 'X@.X' WHERE OWNER_ID = '30001';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING check constraint on P_PHOTO.PHOTO_FILENAME...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
  WHERE PHOTO_ID = '50001' 
;
IF VARROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_PHOTO SET PHOTO_FILENAME = 'EEE.jpx' WHERE PHOTO_ID = '50001'; 
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING UNIQUE CONSTRAINTS----------');
DBMS_OUTPUT.PUT_LINE('CHECKING UNIQUE CONSTRAINT FOR P_DOGBREED (BREED_COMMON_NAME)...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOGBREED
  WHERE BREED_ID = '20100' OR BREED_ID = '20101'
	;
IF VARROWCOUNT <> 2 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test records not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_DOGBREED SET BREED_COMMON_NAME = 'A' WHERE BREED_ID = '20100' OR BREED_ID = '20101';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING UNIQUE CONSTRAINT FOR P_OWNER (OWNER_FNAME, OWNER_LNAME, STREETADDRESS1, STREETADDRESS2, ZIP)...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '30001' OR OWNER_ID = '30002'
	;
IF VARROWCOUNT <> 2 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test records not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_OWNER SET OWNER_FNAME = 'A', OWNER_LNAME = 'A', STREETADDRESS1 = 'A', STREETADDRESS2 = 'A', ZIP = 'A' WHERE OWNER_ID = '30001' OR OWNER_ID = '30002';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING UNIQUE CONSTRAINT FOR P_SERVICE_DOGS (SERVICE_DOG_LICENSE_NUM)...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_DOGS
  WHERE DOG_ID = '10003' OR DOG_ID = '10007'
	;
IF VARROWCOUNT <> 2 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test records not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_SERVICE_DOGS SET SERVICE_DOG_LICENSE_NUM = 'W' WHERE DOG_ID = '10003' OR DOG_ID = '10007';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING UNIQUE CONSTRAINT FOR P_PET (PET_DOG_LICENSE_NUM)...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10001' OR DOG_ID = '10002'
	;
IF VARROWCOUNT <> 2 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test records not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_PET SET PET_DOG_LICENSE_NUM = 'W' WHERE DOG_ID = '10001' OR DOG_ID = '10002';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING UNIQUE CONSTRAINT FOR P_SERVICE_CERTIFICATIONS (CERTIFICATION, DOG_ID)...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_SERVICE_CERTIFICATIONS
  WHERE CERT_ID = '60001' OR CERT_ID = '60002'
	;
IF VARROWCOUNT <> 2 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test records not found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
UPDATE P_SERVICE_CERTIFICATIONS SET CERTIFICATION = 'X', DOG_ID = 'X' WHERE CERT_ID = '60001' OR CERT_ID = '60002';
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
end;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('   ');
DBMS_OUTPUT.PUT_LINE('----------CHECKING DEFAULT VALUES----------');
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_DOG.DOG_NAME...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
  WHERE DOG_ID = '11111' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOG (DOG_ID,DOG_BIRTH_MONTH,DOG_BIRTH_YEAR,SEX,SPAYED_OR_NEUTERED) values ('11111',3,2013,'M','Y');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	DOG_NAME INTO VARSTRING
  FROM		P_DOG
  WHERE DOG_ID = '11111' 
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'UNKNOWN') OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_DOG.SPAYED_OR_NEUTERED...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG
  WHERE DOG_ID = '11111' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOG (DOG_ID,DOG_NAME,DOG_BIRTH_MONTH,DOG_BIRTH_YEAR,SEX) values ('11111','LOKI',3,2013,'M');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	SPAYED_OR_NEUTERED INTO VARSTRING
  FROM		P_DOG
  WHERE DOG_ID = '11111' 
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'N') OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;



BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_DOG_BREED_PERCENTAGE.PERCENT...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10001' AND BREED_ID = '20200'
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_DOG_BREED_PERCENTAGE (DOG_ID,BREED_ID) values ('10001','20200');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARNUMBER := 12.34;
  SELECT	PERCENT INTO VARNUMBER
  FROM		P_DOG_BREED_PERCENTAGE
  WHERE DOG_ID = '10001' AND BREED_ID = '20200' 
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARNUMBER <> 100.00) OR VARNUMBER = 12.34 OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_INCIDENT.INCIDENT_NUM...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10002' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_TYPE,DATE_OF_INCIDENT,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10002','BITES HUMAN',to_date('12-MAR-10','DD-MON-RR'),'Y','Bit mailcarrier - required surgical repair');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARNUMBER := 12.34;
  SELECT	INCIDENT_NUM INTO VARNUMBER
  FROM		P_INCIDENT
  WHERE DOG_ID = '10002'  
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARNUMBER <> 1.00) OR VARNUMBER = 12.34 OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_INCIDENT.INCIDENT_TYPE...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10002' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,DATE_OF_INCIDENT,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10002',1,to_date('12-MAR-10','DD-MON-RR'),'Y','Bit mailcarrier - required surgical repair');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	INCIDENT_TYPE INTO VARSTRING
  FROM		P_INCIDENT
  WHERE DOG_ID = '10002'  
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'OFF LEASH') OR VARSTRING = 'EMPTY' OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_INCIDENT.DATE_OF_INCIDENT...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10002' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,INCIDENT_TYPE,HAS_MAJOR_HUMAN_INJURY,INC_DESCRIPTION) values ('10002',1,'BITES HUMAN','Y','Bit mailcarrier - required surgical repair');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARDATE := '04-JUL-1976';
  SELECT	DATE_OF_INCIDENT INTO VARDATE
	FROM		P_INCIDENT
  WHERE DOG_ID = '10002'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARDATE > (SYSDATE +.10) OR (VARDATE < SYSDATE - .10) OR VARDATE = '04-JUL-1976' OR VARDATE IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_INCIDENT.HAS_MAJOR_HUMAN_INJURY...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_INCIDENT
  WHERE DOG_ID = '10002' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_INCIDENT (DOG_ID,INCIDENT_NUM,INCIDENT_TYPE,DATE_OF_INCIDENT,INC_DESCRIPTION) values ('10002',1,'OFF LEASH',to_date('12-MAR-10','DD-MON-RR'),'Bit mailcarrier - required surgical repair');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	HAS_MAJOR_HUMAN_INJURY INTO VARSTRING
  FROM		P_INCIDENT
  WHERE DOG_ID = '10002'  
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'N') OR VARSTRING = 'EMPTY' OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;


BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_OWNER.CITY...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '10000' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,STATE,ZIP,TIMESTAMP,PHONE,EMAIL) values ('10000','Alan1','Barry1','10 Elm Drive1',null,'PA','18704',to_timestamp('05-JUL-14 11.29.10.000000000 AM','DD-MON-RR HH.MI.SS.FF AM'),'5705559631','abarry@someplace.com');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	CITY INTO VARSTRING
  FROM		P_OWNER
  WHERE OWNER_ID = '10000'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'LARKSVILLE') OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_OWNER.STATE...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '10000' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,CITY,ZIP,TIMESTAMP,PHONE,EMAIL) values ('10000','Alan1','Barry1','10 Elm Drive1',null,'LARKSVILLE','18704',to_timestamp('05-JUL-14 11.29.10.000000000 AM','DD-MON-RR HH.MI.SS.FF AM'),'5705559631','abarry@someplace.com');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	STATE INTO VARSTRING
  FROM		P_OWNER
  WHERE OWNER_ID = '10000'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> 'PA') OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_OWNER.ZIP...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '10000' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,CITY,STATE,TIMESTAMP,PHONE,EMAIL) values ('10000','Alan1','Barry1','10 Elm Drive1',null,'LARKSVILLE','PA',to_timestamp('05-JUL-14 11.29.10.000000000 AM','DD-MON-RR HH.MI.SS.FF AM'),'5705559631','abarry@someplace.com');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	ZIP INTO VARSTRING
  FROM		P_OWNER
  WHERE OWNER_ID = '10000'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARSTRING <> '18704') OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_OWNER.TIMESTAMP...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_OWNER
  WHERE OWNER_ID = '10000' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_OWNER (OWNER_ID,OWNER_FNAME,OWNER_LNAME,STREETADDRESS1,STREETADDRESS2,CITY,STATE,ZIP,PHONE,EMAIL) values ('10000','Alan1','Barry1','10 Elm1 Drive',null,'LARKSVILLE','PA','18704','5705559631','abarry@someplace.com');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARDATE := '04-JUL-1976';
  SELECT	TIMESTAMP INTO VARDATE
	FROM		P_OWNER
  WHERE OWNER_ID = '10000'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARDATE > (SYSDATE +.10) OR (VARDATE < SYSDATE - .10) OR VARDATE = '04-JUL-1976' OR VARDATE IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PET.PET_DOG_LICENSE_NUM...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE   DOG_ID = '10003'
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PET (DOG_ID,DATE_OF_LAST_PAYMENT,TOTAL_FEES_CURRENT_YEAR,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10003',to_date('05-JAN-14','DD-MON-RR'),30,15,15);
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	PET_DOG_LICENSE_NUM INTO VARSTRING
  FROM		P_PET
  WHERE   DOG_ID = '10003'
;
EXCEPTION 
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARSTRING <> 'UNLICENSED' OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PET.DATE_OF_LAST_PAYMENT...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10003' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,TOTAL_FEES_CURRENT_YEAR,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10003','LPDE13501 ',30,15,15);
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARDATE := '04-JUL-1976';
  SELECT	DATE_OF_LAST_PAYMENT INTO VARDATE
	FROM		P_PET
  WHERE DOG_ID = '10003'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARDATE > (SYSDATE +.10) OR (VARDATE < SYSDATE - .10) OR VARDATE = '04-JUL-1976' OR VARDATE IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PET.TOTAL_FEES_CURRENT_YEAR...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10003' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,DATE_OF_LAST_PAYMENT,TOTAL_PAYMENTS_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10003','LPDEE501  ',to_date('05-JAN-14','DD-MON-RR'),15,15);
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARNUMBER := 12.34;
  SELECT	TOTAL_FEES_CURRENT_YEAR INTO VARNUMBER
  FROM		P_PET
  WHERE DOG_ID = '10003'  
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARNUMBER <> 25.00) OR VARNUMBER = 12.34 OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PET.TOTAL_PAYMENTS_CURRENT_YEAR...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PET
  WHERE DOG_ID = '10003' 
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PET (DOG_ID,PET_DOG_LICENSE_NUM,DATE_OF_LAST_PAYMENT,TOTAL_FEES_CURRENT_YEAR,BALANCE_DUE_CURRENT_YEAR) values ('10003','LPD1EE01  ',to_date('05-JAN-14','DD-MON-RR'),30,15);
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARNUMBER := 12.34;
  SELECT	TOTAL_PAYMENTS_CURRENT_YEAR INTO VARNUMBER
  FROM		P_PET
  WHERE DOG_ID = '10003'  
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF (VARNUMBER <> 0.00) OR VARNUMBER = 12.34 OR VARNUMBER IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PHOTO.PHOTO_FILENAME...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
  WHERE   PHOTO_ID = '11111'
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PHOTO (PHOTO_ID,PHOTO_TIMESTAMP,DOG_ID) values ('11111',to_timestamp('01-JUL-14 12.41.28.000000000 PM','DD-MON-RR HH.MI.SS.FF AM'),'10001');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARSTRING := 'EMPTY';
  SELECT	PHOTO_FILENAME INTO VARSTRING
  FROM		P_PHOTO
  WHERE   PHOTO_ID = '11111'
;
EXCEPTION 
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARSTRING <> 'NOIMAGE.JPG' OR VARSTRING = 'EMPTY' OR VARSTRING IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;

BEGIN
ROLLBACK;
DBMS_OUTPUT.PUT_LINE('CHECKING DEFAULT VALUE FOR P_PHOTO.PHOTO_TIMESTAMP...');
  SELECT	COUNT(*) INTO VARROWCOUNT
	FROM		P_PHOTO
  WHERE   PHOTO_ID = '11111'
;
IF VARROWCOUNT <> 0 THEN
DBMS_OUTPUT.PUT_LINE('    ....Aborted - test record found');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
BEGIN
Insert into P_PHOTO (PHOTO_ID,PHOTO_FILENAME,DOG_ID) values ('11111','2014rft.jpg','10001');
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('    ....NO DEFAULT SET');
END;
BEGIN
 BEGIN
  VARDATE := '04-JUL-1976';
  SELECT	PHOTO_TIMESTAMP INTO VARDATE
	FROM		P_PHOTO
  WHERE   PHOTO_ID = '11111'
;
EXCEPTION 
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('    ....INSERTED DEFAULT VALUE NOT FOUND');
 END;
IF VARDATE > (SYSDATE +.10) OR (VARDATE < SYSDATE - .10) OR VARDATE = '04-JUL-1976' OR VARDATE IS NULL THEN
DBMS_OUTPUT.PUT_LINE('    ....FAILED');
INCORRECTCOUNT := INCORRECTCOUNT + 1;
DBMS_OUTPUT.PUT_LINE('##### NOTE ERROR ABOVE #####');
ELSE
DBMS_OUTPUT.PUT_LINE('    ....PASSED');
END IF;
END;
END IF;
END;
  ROLLBACK ;

BEGIN
	DBMS_OUTPUT.PUT_LINE('********************************************************************');
	DBMS_OUTPUT.PUT_LINE('********************************************************************');
	DBMS_OUTPUT.PUT_LINE('***  You have '||INCORRECTCOUNT||' errors that need to be fixed (see detail above)  ***');
    IF INCORRECTCOUNT = 0 THEN
    	DBMS_OUTPUT.PUT_LINE('***             C O N G R A T U L A T I O N S ! ! !              ***');
    	DBMS_OUTPUT.PUT_LINE('***   (Do not forget to submit your DDL statements on Learn!)    ***');
    END IF;
	DBMS_OUTPUT.PUT_LINE('********************************************************************');
	DBMS_OUTPUT.PUT_LINE('********************************************************************');

END;

  RETURN;
END;